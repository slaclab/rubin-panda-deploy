---
# Source: harvester/charts/harvester/templates/configmap.yaml
# harvester configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: harvester-dev-configjson
data:
  panda_harvester_configmap.json: |-
    {
      "db": {
        "engine": "mariadb",
        "useMySQLdb": true,
        "schema": "harvester",
        "host": "${HARVESTER_DB_HOST}",
        "password": "${MARIADB_PASSWORD}",
        "verbose": true
      },
      "master": {
        "gname": "zp",
        "harvester_id": "${HARVESTER_ID}",
        "uname": "atlpan"
      },
      "credmanager": {
        "moduleName": [],
        "pluginConfigs": []
      },
      "payload_interaction": {
        "jobSpecFile": "pandaJobData.out"
      },
      "pandacon": {
        "ca_cert": false,
        "auth_type": "oidc",
        "auth_token": "${PANDA_AUTH_ID_TOKEN}",
        "auth_origin": "${PANDA_AUTH_VO}",
        "pandaURL": "${PANDA_URL_SSL}",
        "pandaURLSSL": "${PANDA_URL_SSL}",
        "verbose": true
      },
      "frontend": {
        "type": "apache"
      },
      "qconf": {
        "configFile": "/opt/harvester/etc/panda/panda_queueconfig.json",
        "queueList": [
          "ALL"
        ]
      },
      "cacher": {
        "data": [
          "ddmendpoints_objectstores.json||https://datalake-cric.cern.ch/api/atlas/ddmendpoint/query/?json&state=ACTIVE&site_state=ACTIVE&preset=dict&json_pretty=1&type[]=OS_LOGS&type[]=OS_ES",
          "panda_queues.json||https://datalake-cric.cern.ch/api/atlas/pandaqueue/query/?json",
          "agis_ddmendpoints.json||https://datalake-cric.cern.ch/api/atlas/ddmendpoint/query/list/?json&state=ACTIVE&site_state=ACTIVE&preset=dict&json_pretty=1"
        ]
      }
    }
---
# Source: harvester/charts/harvester/templates/configmap.yaml
# queue config
apiVersion: v1
kind: ConfigMap
metadata:
  name: harvester-dev-queueconfig
data:
  
  panda_queueconfig.json: |-
    {
    
      "production.pull": {
        "isTemplateQueue": true,
        "prodSourceLabel": "managed",
        "nQueueLimitWorkerRatio": 50,
        "nQueueLimitWorkerMin": 100,
        "nQueueLimitWorkerMax": 10000,
        "maxWorkers": 10,
        "maxNewWorkersPerCycle": 100,
        "mapType": "NoJob",
        "truePilot": true,
        "maxSubmissionAttempts": 3,
        "walltimeLimit": 1209600,
        "prefetchEvents": false,
        "preparator": {
          "name": "DummyPreparator",
          "module": "pandaharvester.harvesterpreparator.dummy_preparator"
        },
        "submitter": {
          "name": "HTCondorSubmitter",
          "module": "pandaharvester.harvestersubmitter.htcondor_submitter",
          "useSpool": false,
          "useAtlasGridCE": false,
          "useAtlasAGIS": true,
          "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot.sdf",
          "executableFile": "/opt/harvester/sandbox/lsst.runpilot2-wrapper.sh",
          "x509UserProxy": "/data/harvester/run/x509up_u25606",
          "logDir": "/var/log/panda/condor_logs",
          "logBaseURL": "https://panda-dev-server/condor_logs",
          "nProcesses": 8
        },
        "workerMaker": {
          "name": "SimpleWorkerMaker",
          "module": "pandaharvester.harvesterworkermaker.simple_worker_maker",
          "jobAttributesToUse": [
            "nCore"
          ],
          "pilotTypeRandomWeightsPermille": {
            "RC": 10,
            "ALRB": 10,
            "PT": 10
          }
        },
        "messenger": {
          "name": "SharedFileMessenger",
          "module": "pandaharvester.harvestermessenger.shared_file_messenger",
          "jobSpecFileFormat": "cgi",
          "accessPoint": "/var/log/panda/harvester_wdirs/${harvesterID}/${_workerID_3.2}/${_workerID_1.0}/${workerID}"
        },
        "stager": {
          "name": "DummyStager",
          "module": "pandaharvester.harvesterstager.dummy_stager"
        },
        "monitor": {
          "name": "HTCondorMonitor",
          "module": "pandaharvester.harvestermonitor.htcondor_monitor",
          "cancelUnknown": false
        },
        "sweeper": {
          "name": "HTCondorSweeper",
          "module": "pandaharvester.harvestersweeper.htcondor_sweeper"
        }
      },
    
      "production.push": {
        "isTemplateQueue": true,
        "prodSourceLabel": "managed",
        "nQueueLimitWorker": 10000,
        "nQueueLimitJobRatio":40,
        "nQueueLimitJobMax": 1000,
        "nQueueLimitJobMin":3,
        "maxWorkers": 10,
        "maxNewWorkersPerCycle": 100,
        "mapType": "OneToOne",
        "truePilot": true,
        "maxSubmissionAttempts": 3,
        "walltimeLimit": 1209600,
        "prefetchEvents": false,
        "preparator": {
          "name": "DummyPreparator",
          "module": "pandaharvester.harvesterpreparator.dummy_preparator"
        },
        "submitter": {
          "name": "HTCondorSubmitter",
          "module": "pandaharvester.harvestersubmitter.htcondor_submitter",
          "useSpool": false,
          "useAtlasGridCE": false,
          "useAtlasAGIS": true,
          "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot.sdf",
          "executableFile": "/opt/harvester/sandbox/lsst.runpilot2-wrapper.sh",
          "x509UserProxy": "/data/harvester/run/x509up_u25606",
          "logDir": "/var/log/panda/condor_logs",
          "logBaseURL": "https://panda-dev-server/condor_logs",
          "nProcesses": 8
        },
        "workerMaker": {
          "name": "SimpleWorkerMaker",
          "module": "pandaharvester.harvesterworkermaker.simple_worker_maker",
          "jobAttributesToUse": [
            "nCore",
            "minRamCount"
          ],
          "pilotTypeRandomWeightsPermille": {
            "RC": 10,
            "ALRB": 10,
            "PT": 10
          }
        },
        "messenger": {
          "name": "SharedFileMessenger",
          "module": "pandaharvester.harvestermessenger.shared_file_messenger",
          "jobSpecFileFormat": "cgi",
          "accessPoint": "/var/log/panda/harvester_wdirs/${harvesterID}/${_workerID_3.2}/${_workerID_1.0}/${workerID}"
        },
        "stager": {
          "name": "DummyStager",
          "module": "pandaharvester.harvesterstager.dummy_stager"
        },
        "monitor": {
          "name": "HTCondorMonitor",
          "module": "pandaharvester.harvestermonitor.htcondor_monitor",
          "cancelUnknown": false
        },
        "sweeper": {
          "name": "HTCondorSweeper",
          "module": "pandaharvester.harvestersweeper.htcondor_sweeper"
        }
      },
    
    
      "production_k8s.pull":{
          "isTemplateQueue": true,
          "prodSourceLabel":"managed",
          "prodSourceLabelRandomWeightsPermille": {"ptest":10, "rc_test":10, "rc_test2":10, "rc_alrb":10},
          "maxWorkers": 10000,
          "nQueueLimitWorkerRatio": 40,
          "nQueueLimitWorkerMin": 1,
          "nQueueLimitWorkerMax": 100,
          "nQueueLimitWorker":50,
          "maxNewWorkersPerCycle":50,
          "mapType":"NoJob",
          "truePilot":true,
          "allowJobMixture":true,
          "maxSubmissionAttempts":3,
          "walltimeLimit":1209600,
          "prefetchEvents":false,
          "preparator":{
              "name":"DummyPreparator",
              "module":"pandaharvester.harvesterpreparator.dummy_preparator"
          },
          "workerMaker":{
              "name":"SimpleWorkerMaker",
              "module":"pandaharvester.harvesterworkermaker.simple_worker_maker",
              "jobAttributesToUse":[
                  "nCore"
              ],
              "pilotTypeRandomWeightsPermille": {"RC": 10, "ALRB": 10, "PT": 10}
          },
          "messenger":{
              "name":"SharedFileMessenger",
              "module":"pandaharvester.harvestermessenger.shared_file_messenger",
              "jobSpecFileFormat":"cgi",
              "accessPoint":"/var/log/panda/harvester_wdirs/${harvesterID}/${_workerID_3.2}/${_workerID_1.0}/${workerID}"
          },
          "stager":{
              "name":"DummyStager",
              "module":"pandaharvester.harvesterstager.dummy_stager"
          },
          "submitter":{
              "name": "K8sSubmitter",
              "module": "pandaharvester.harvestersubmitter.k8s_submitter",
              "x509UserProxy": "/data/harvester/run/x509up_u25606",    
              "proxySecretPath": "/data/harvester/run/x509up_u25606",
              "logDir": "/var/log/panda/condor_logs",
              "logBaseURL": "https://panda-dev-server/condor_logs",
              "cpuAdjustRatio": 90,
              "memoryAdjustRatio": 100,
              "nProcesses": 4
          },
          "monitor":{
              "name": "K8sMonitor",
              "module": "pandaharvester.harvestermonitor.k8s_monitor"
          },
          "sweeper":{
              "name": "K8sSweeper",
              "module": "pandaharvester.harvestersweeper.k8s_sweeper"
          },
          "credmanagers": [
            {
              "module": "pandaharvester.harvestercredmanager.k8s_secret_cred_manager",
              "name": "K8sSecretCredManager",
              "k8s_namespace": "${common.k8s_namespace}",
              "k8s_config_file": "${common.k8s_config_file}",
              "proxy_files": ["/data/harvester/run/x509up_u25606"]
            }
          ],
          "common": {
              "k8s_yaml_file": "/opt/harvester/sandbox/job_cvmfs_prp_driver.yaml",
              "k8s_config_file": "/opt/harvester/sandbox/kube",
              "k8s_namespace": "default"
          }
      },
      "production_k8s.push":{
          "isTemplateQueue": true,
          "prodSourceLabel":"managed",
          "nQueueLimitJobMax":10000,
          "nQueueLimitJob": 10000,
          "nQueueLimitWorker":10000,
          "nQueueLimitWorkerRatio": 50,
          "maxWorkers":50000,
          "maxNewWorkersPerCycle":500,
          "mapType":"OneToOne",
          "truePilot":true,
          "maxSubmissionAttempts":5,
          "walltimeLimit":172800,
          "prefetchEvents":false,
          "preparator":{
              "name":"DummyPreparator",
              "module":"pandaharvester.harvesterpreparator.dummy_preparator"
          },
          "submitter":{
              "name": "K8sSubmitter",
              "module": "pandaharvester.harvestersubmitter.k8s_submitter",
              "x509UserProxy": "/data/harvester/run/x509up_u25606",
              "proxySecretPath": "/data/harvester/run/x509up_u25606",
              "logDir": "/var/log/panda/condor_logs",
              "logBaseURL": "https://panda-dev-server/condor_logs",
              "cpuAdjustRatio": 90,
              "memoryAdjustRatio": 100,
              "nProcesses": 4
          },
          "workerMaker":{
              "name":"SimpleWorkerMaker",
              "module":"pandaharvester.harvesterworkermaker.simple_worker_maker",
              "jobAttributesToUse":[
                  "nCore"
              ]
          },
          "messenger":{
              "name":"SharedFileMessenger",
              "module":"pandaharvester.harvestermessenger.shared_file_messenger",
              "jobSpecFileFormat":"cgi",
              "accessPoint":"/var/log/panda/harvester_wdirs/${harvesterID}/${_workerID_3.2}/${_workerID_1.0}/${workerID}"
          },
          "stager":{
              "name":"DummyStager",
              "module":"pandaharvester.harvesterstager.dummy_stager"
          },
          "monitor":{
              "name": "K8sMonitor",
              "module": "pandaharvester.harvestermonitor.k8s_monitor"
          },
          "sweeper":{
              "name": "K8sSweeper",
              "module": "pandaharvester.harvestersweeper.k8s_sweeper"
          },
          "credmanagers": [
            {
              "module": "pandaharvester.harvestercredmanager.k8s_secret_cred_manager",
              "name": "K8sSecretCredManager",
              "k8s_namespace": "${common.k8s_namespace}",
              "k8s_config_file": "${common.k8s_config_file}",
              "proxy_files": ["/data/harvester/run/x509up_u25606"]
            }
          ],
          "common": {
              "k8s_yaml_file": "/opt/harvester/sandbox/job_cvmfs_prp_driver.yaml",
              "k8s_config_file": "/opt/harvester/sandbox/kube",
              "k8s_namespace": "default"
          }
      },
    
      "SLAC_TEST": {
          "queueStatus": "online",
          "prodSourceLabel": "managed",
          "prodSourceLabelRandomWeightsPermille": {"rc_test":0, "rc_test2":0, "rc_alrb":0},
          "templateQueueName": "production.push",
          "maxWorkers": 900,
          "maxNewWorkersPerCycle":10,
          "nQueueLimitWorkerRatio": 500,
          "nQueueLimitWorkerMin":100,
          "nQueueLimitWorkerMax": 500,
          "nQueueLimitJobMax":10000,
          "nQueueLimitJobMin":100,
          "nQueueLimitJob": 10000,
          "nQueueLimitWorker":10000,
    
          "submitter": {
              "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot_slac.sdf"
          }
      },
    
      "CC-IN2P3_TEST": {
          "queueStatus": "online",
          "prodSourceLabel": "managed",
          "prodSourceLabelRandomWeightsPermille": {"rc_test":0, "rc_test2":0, "rc_alrb":0},
          "templateQueueName": "production.push",
          "maxWorkers": 3,
          "nQueueLimitWorkerRatio": 500,
          "nQueueLimitWorkerMin":100,
          "nQueueLimitWorkerMax": 500,
          "nQueueLimitJobMax":10000,
          "nQueueLimitJobMin":100,
          "nQueueLimitJob": 10000,
          "nQueueLimitWorker":10000,
    
          "submitter": {
              "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot.sdf"
          }
      },
    
      "LANCS_TEST": {
          "queueStatus": "online",
          "prodSourceLabel": "test",
          "prodSourceLabelRandomWeightsPermille": {"rc_test":0, "rc_test2":0, "rc_alrb":0},
          "templateQueueName": "production.push",
          "maxWorkers": 1,
          "nQueueLimitWorkerRatio": 500,
          "nQueueLimitWorkerMin":100,
          "nQueueLimitWorkerMax": 500,
          "nQueueLimitJobMax":10000,
          "nQueueLimitJobMin":100,
          "nQueueLimitJob": 10000,
          "nQueueLimitWorker":10000,
    
          "submitter": {
              "useAtlasGridCE": true,
              "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot.sdf",
              "x509UserProxy": "/data/harvester/run/x509up_u25606_lsst"
          }
      },
    
      "QMUL_TEST": {
          "queueStatus": "online",
          "prodSourceLabel": "test",
          "prodSourceLabelRandomWeightsPermille": {"rc_test":0, "rc_test2":0, "rc_alrb":0},
          "templateQueueName": "production.push",
          "maxWorkers": 1,
          "nQueueLimitWorkerRatio": 500,
          "nQueueLimitWorkerMin":100,
          "nQueueLimitWorkerMax": 500,
          "nQueueLimitJobMax":10000,
          "nQueueLimitJobMin":100,
          "nQueueLimitJob": 10000,
          "nQueueLimitWorker":10000,
    
          "submitter": {
              "useAtlasGridCE": true,
              "templateFile": "/opt/harvester/sandbox/lsst.submit_pilot.sdf",
              "x509UserProxy": "/data/harvester/run/x509up_u25606"
          }
      }
    
    }
    

  pilot_wrapper.sh: |-
---
# Source: harvester/charts/harvester/templates/configmap.yaml
# env variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: harvester-dev-env
data:
  EXPERIMENT: lsst
  PANDA_URL: "https://FIXME/server/panda"
  PANDA_URL_SSL: "https://FIXME/server/panda"
  PANDA_AUTH_ID_TOKEN: FIXME
  PANDA_AUTH_VO: panda_dev.production
  PANDA_BEHIND_REAL_LB: "1"
  http_proxy: "http://atlsquid.slac.stanford.edu:3128"
  no_proxy: "localhost,idds-dev-rest,panda-dev-server,FIXME"
  https_proxy: "http://atlsquid.slac.stanford.edu:3128"
  HARVESTER_ID: "my-harvester"
---
# Source: harvester/charts/harvester/templates/configmap.yaml
# sandbox
apiVersion: v1
kind: ConfigMap
metadata:
  name: harvester-dev-sandbox
binaryData:
  condor_config.local: |-
    Q09ORE9SX0hPU1QgPSAkKEZVTExfSE9TVE5BTUUpCkNPTExFQ1RPUl9IT1NUID0gJChDT05ET1JfSE9TVCk6OTYxOApVU0VfU0hBUkVEX1BPUlQgPSBGQUxTRQoKREFFTU9OX0xJU1QgPSBNQVNURVIsIFNDSEVERCwgQ09MTEVDVE9SLCBORUdPVElBVE9SCkNPTkRPUl9HQUhQPSQoU0JJTikvY29uZG9yX2MtZ2FocApDX0dBSFBfTE9HPS90bXAvQ0dBSFBMb2cuJChVU0VSTkFNRSkKQ19HQUhQX1dPUktFUl9USFJFQURfTE9HPS90bXAvQ0dBSFBXb3JrZXJMb2cuJChVU0VSTkFNRSkKQ19HQUhQX1dPUktFUl9USFJFQURfTE9DSyA9IC90bXAvQ0dBSFBXb3JrZXJMb2NrLiQoVVNFUk5BTUUpCgpTQ0hFRERfREVCVUcgPSBEX0ZVTExERUJVRyBEX1NFQ1VSSVRZClNDSEVERF9ERUJVRyA9ICQoU0NIRUREX0RFQlVHKSBEX0ZVTExERUJVRyBEX0NPTU1BTkQKCkdSSURNQU5BR0VSX0RFQlVHID0gRF9GVUxMREVCVUcKClNFQ19ERUZBVUxUX0FVVEhFTlRJQ0FUSU9OX01FVEhPRFMgPSBDTEFJTVRPQkUsIEZTLCBHU0kKU0VDX0NMSUVOVF9BVVRIRU5USUNBVElPTl9NRVRIT0RTID0gR1NJLCBGUwo=
  init-harvester: |-
    IyEvYmluL2Jhc2gKCiMgaW5zdGFsbCBDQSBmaWxlcwovb3B0L2hhcnZlc3Rlci9iaW4vcGFuZGFfY29tbW9uLWluc3RhbGxfaWd0Zl9jYSA+IC92YXIvbG9nL3BhbmRhL2luc3RhbGxfaWd0Zl9jYS5sb2cgMj4mMQoKIyBjb25kb3IgbG9ncwpta2RpciAtcCAvdmFyL2xvZy9wYW5kYS9jb25kb3JfbG9ncwpjaG1vZCA3NzcgL3Zhci9sb2cvcGFuZGEvY29uZG9yX2xvZ3MKCgppZiBbWyAhIC16ICIke0VYUEVSSU1FTlR9IiBdXTsgdGhlbgogICAgQ3VycmVudERpcj0iJCggY2QgIiQoIGRpcm5hbWUgIiR7QkFTSF9TT1VSQ0VbMF19IiApIiAmJiBwd2QgKSIKICAgIGluaXRfc2NyaXB0PSR7Q3VycmVudERpcn0vJHtFWFBFUklNRU5UfS5pbml0LWhhcnZlc3RlcgogICAgaWYgWyAtZiAke2luaXRfc2NyaXB0fSBdOyB0aGVuCiAgICAgICAgZWNobyAiRXhlY3V0aW5nICR7aW5pdF9zY3JpcHR9IgogICAgICAgIGJhc2ggJGluaXRfc2NyaXB0CiAgICBmaQpmaQo=
  lsst.init-harvester: |-
    IyEvYmluL2Jhc2gKCiMgY29weSBjZXJ0cyBhbmQgc2V0IHBlcm1pc3Npb24KIyBjcCAvb3B0L2hhcnZlc3Rlci9zYW5kYm94LyoucGVtIC9kYXRhL2hhcnZlc3Rlci8KIyBjaG1vZCA2MDAgL2RhdGEvaGFydmVzdGVyLyoucGVtCm1rZGlyIC1wIC9kYXRhL2hhcnZlc3Rlci9ydW4KY2htb2QgNzc3IC9kYXRhL2hhcnZlc3Rlci9ydW4KYmFzaCAvb3B0L2hhcnZlc3Rlci9zYW5kYm94L2xzc3Qudm9tc3Byb3h5LXJlbmV3Cgo=
  lsst.run-harvester-crons: |-
    IyEvYmluL2Jhc2gKCiMgcmVuZXcgdm9tc3Byb3h5CndoaWxlIHRydWU7IGJhc2ggL29wdC9oYXJ2ZXN0ZXIvc2FuZGJveC9sc3N0LnZvbXNwcm94eS1yZW5ldzsgc2xlZXAgMzYwMDsgZG9uZSAmCgo=
  lsst.runpilot2-wrapper.sh: |-
    
  lsst.submit_pilot.sdf: |-
    ZXhlY3V0YWJsZSA9IC9vcHQvaGFydmVzdGVyL3NhbmRib3gvbHNzdC5ydW5waWxvdDItd3JhcHBlci5zaAojYXJndW1lbnRzID0gLXMge2NvbXB1dGluZ1NpdGV9IC1yIHtjb21wdXRpbmdTaXRlfSAtcSB7cGFuZGFRdWV1ZU5hbWV9IC1qIHtwcm9kU291cmNlTGFiZWx9IC1pIHtwaWxvdFR5cGV9IC10IC13IGdlbmVyaWMgLS1waWxvdC11c2VyIGdlbmVyaWMgLS11cmwgaHR0cHM6Ly9zcGhlbml4LXBhbmRhc2VydmVyLmFwcHMucmNmLmJubC5nb3YgLXAgNDQzIC1kIC0taGFydmVzdGVyLXN1Ym1pdC1tb2RlIFBVU0ggLS1hbGxvdy1zYW1lLXVzZXI9RmFsc2UgLS1pbnB1dC1kZXN0aW5hdGlvbi1kaXIgL3NwaGVuaXgvbHVzdHJlMDEvc3Bobnhwcm8vcnVjaW8gLS1qb2ItdHlwZT17am9iVHlwZX0ge3BpbG90UmVzb3VyY2VUeXBlT3B0aW9ufSB7cGlsb3RVcmxPcHRpb259IC0tcGlsb3R2ZXJzaW9uIHtwaWxvdFZlcnNpb259IHtwaWxvdFB5dGhvbk9wdGlvbn0KCiMgYXJndW1lbnRzID0gIi1zIHtjb21wdXRpbmdTaXRlfSAtciB7Y29tcHV0aW5nU2l0ZX0gLXEge3BhbmRhUXVldWVOYW1lfSAtaiB7cHJvZFNvdXJjZUxhYmVsfSAtaSB7cGlsb3RUeXBlfSAtdyBnZW5lcmljIC0tcGlsb3QtdXNlciBydWJpbiAtLXVybCBodHRwczovL3BhbmRhc2VydmVyLWRvbWEuY2Vybi5jaCAtZCAtLWhhcnZlc3Rlci1zdWJtaXQtbW9kZSBQVVNIIHtwaWxvdFJlc291cmNlVHlwZU9wdGlvbn0gLS1xdWV1ZWRhdGEtdXJsIGh0dHA6Ly9wYW5kYXNlcnZlci1kb21hLmNlcm4uY2g6MjUwODAvY2FjaGUvc2NoZWRjb25maWcve2NvbXB1dGluZ1NpdGV9LmFsbC5qc29uIC0tc3RvcmFnZWRhdGEtdXJsIGh0dHBzOi8vZGF0YWxha2UtY3JpYy5jZXJuLmNoL2FwaS9hdGxhcy9kZG1lbmRwb2ludC9xdWVyeS8/anNvbiAtLXBpbG90dmVyc2lvbiAzICAtLXB5dGhvbnZlcnNpb24gMyAtLWxvY2FscHkiCgphcmd1bWVudHMgPSAiLXMge2NvbXB1dGluZ1NpdGV9IC1yIHtjb21wdXRpbmdTaXRlfSAtcSB7cGFuZGFRdWV1ZU5hbWV9IC1qIHtwcm9kU291cmNlTGFiZWx9IC1pIHtwaWxvdFR5cGV9IC10IC13IGdlbmVyaWMgLS1waWxvdC11c2VyIHJ1YmluIC0tdXJsIGh0dHBzOi8vcGFuZGEtZGV2LXNlcnZlci5zbGFjLnN0YW5mb3JkLmVkdSAtZCAtLWhhcnZlc3Rlci1zdWJtaXQtbW9kZSBQVVNIIHtwaWxvdFJlc291cmNlVHlwZU9wdGlvbn0gLS1xdWV1ZWRhdGEtdXJsIGh0dHA6Ly9wYW5kYXNlcnZlci1kb21hLmNlcm4uY2g6MjUwODAvY2FjaGUvc2NoZWRjb25maWcve2NvbXB1dGluZ1NpdGV9LmFsbC5qc29uIC0tc3RvcmFnZWRhdGEtdXJsIGh0dHBzOi8vZGF0YWxha2UtY3JpYy5jZXJuLmNoL2FwaS9hdGxhcy9kZG1lbmRwb2ludC9xdWVyeS8/anNvbiAtLXBpbG90dmVyc2lvbiAzICAtLXB5dGhvbnZlcnNpb24gMyAtLWxvY2FscHkgLXAgNDQzIC0tam9iLXR5cGU9e2pvYlR5cGV9IC0tcGlsb3R1cmwgaHR0cDovL2Nlcm4uY2gvYXRsYXMtcGFuZGEtcGlsb3QvcGlsb3QzLVBSRS50YXIuZ3oiCgoKaW5pdGlhbGRpciA9IHthY2Nlc3NQb2ludH0KCmxvZyA9IHtsb2dEaXJ9L3tsb2dTdWJkaXJ9L2dyaWQuJChDbHVzdGVyKS4kKFByb2Nlc3MpLmxvZwpvdXRwdXQgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5vdXQKZXJyb3IgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5lcnIKdHJhbnNmZXJfZXhlY3V0YWJsZSA9IFRydWUKCmVudmlyb25tZW50ID0gIlBBTkRBX0pTSUQ9aGFydmVzdGVyLXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX0lEPXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX1dPUktFUl9JRD17d29ya2VySUR9IEdUQUc9e2d0YWd9IFNUT1JBR0VEQVRBX1NFUlZFUl9VUkw9aHR0cDovL2RhdGFsYWtlLWNyaWMuY2Vybi5jaC9hcGkvYXRsYXMvZGRtZW5kcG9pbnQvcXVlcnkvP2pzb24iCitoYXJ2ZXN0ZXJJRCA9ICJ7aGFydmVzdGVySUR9IgoraGFydmVzdGVyV29ya2VySUQgPSAie3dvcmtlcklEfSIKCnRyYW5zZmVyX2lucHV0X2ZpbGVzID0ge2FjY2Vzc1BvaW50fS9wYW5kYUpvYkRhdGEub3V0Cgp1bml2ZXJzZSA9IGdyaWQKIyBncmlkX3Jlc291cmNlID0gYXJjIGh0dHBzOi8vYXJjY2UxLnNsYWMuc3RhbmZvcmQuZWR1Ojk0NDMvYXJleC9yZXN0LzEuMApncmlkX3Jlc291cmNlID0ge2NlQVJDR3JpZFR5cGV9IHtjZUVuZHBvaW50fQoKbm9yZHVncmlkX3JzbCA9IChxdWV1ZSA9IHtjZVF1ZXVlTmFtZX0pKHJ1bnRpbWVlbnZpcm9ubWVudCA9IEFQUFMvSEVQL0FUTEFTLVNJVEUtTENHKShydW50aW1lZW52aXJvbm1lbnQgPSBFTlYvUFJPWFkpKGpvYm5hbWUgPSBhcmNfcGlsb3QpKGNvdW50ID0ge25Db3JlVG90YWx9KShjb3VudHBlcm5vZGUgPSB7bkNvcmVUb3RhbH0pKG1lbW9yeSA9IHtyZXF1ZXN0UmFtUGVyQ29yZX0pKHdhbGx0aW1lID0ge3JlcXVlc3RXYWxsdGltZX0pKGNwdXRpbWUgPSB7cmVxdWVzdENwdXRpbWV9KShlbnZpcm9ubWVudCA9IChQQU5EQV9KU0lEIGhhcnZlc3Rlci17aGFydmVzdGVySUR9KShIQVJWRVNURVJfSUQge2hhcnZlc3RlcklEfSkoSEFSVkVTVEVSX1dPUktFUl9JRCB7d29ya2VySUR9KShHVEFHIHtndGFnfSkoQVBGTU9OIGh0dHA6Ly9hcGZtb24ubGFuY3MuYWMudWsvYXBpKShBUEZGSUQge2hhcnZlc3RlcklEfSkoQVBGQ0lEICQoQ2x1c3RlcikuJChQcm9jZXNzKSkpCgphcmNfcmVzb3VyY2VzID0gPFNsb3RSZXF1aXJlbWVudD4gIFwKICAgICAgICAgICAgICAgIDxOdW1iZXJPZlNsb3RzPjE8L051bWJlck9mU2xvdHM+IFwKICAgICAgICAgICAgICAgICAgICA8U2xvdHNQZXJIb3N0PjE8L1Nsb3RzUGVySG9zdD4gXAogICAgICAgICAgICAgICAgPC9TbG90UmVxdWlyZW1lbnQ+IFwKICAgICAgICAgICAgICAgIDxRdWV1ZU5hbWU+e2NlUXVldWVOYW1lfTwvUXVldWVOYW1lPiBcCiAgICAgICAgICAgICAgICA8SW5kaXZpZHVhbFBoeXNpY2FsTWVtb3J5PntyZXF1ZXN0UmFtQnl0ZXN9PC9JbmRpdmlkdWFsUGh5c2ljYWxNZW1vcnk+CgpYNTA5VXNlclByb3h5ID0ge3g1MDlVc2VyUHJveHl9ClNob3VsZFRyYW5zZmVyRmlsZXMgPSBZRVMKV2hlblRvVHJhbnNmZXJPdXRwdXQgPSBPTl9FWElUCnVzZV94NTA5dXNlcnByb3h5ID0gdHJ1ZQoKK3JlbW90ZV9qb2J1bml2ZXJzZSA9IDUKK3JlbW90ZV9TaG91bGRUcmFuc2ZlckZpbGVzID0gIllFUyIKK3JlbW90ZV9XaGVuVG9UcmFuc2Zlck91dHB1dCA9ICJPTl9FWElUX09SX0VWSUNUIgorcmVtb3RlX1RyYW5zZmVyT3V0cHV0ID0gIiIKIytyZW1vdGVfUmVxdWVzdENwdXMgPSB7bkNvcmVUb3RhbH0KIytyZW1vdGVfUmVxdWVzdE1lbW9yeSA9IHtyZXF1ZXN0UmFtfQojK3JlbW90ZV9SZXF1ZXN0RGlzayA9IHtyZXF1ZXN0RGlza30KIytyZW1vdGVfSm9iTWF4VmFjYXRlVGltZSA9IHtyZXF1ZXN0V2FsbHRpbWV9Citpb0ludGVuc2l0eSA9IHtpb0ludGVuc2l0eX0KK3hjb3VudCA9IHtuQ29yZVRvdGFsfQorbWF4TWVtb3J5ID0ge3JlcXVlc3RSYW19CityZW1vdGVfcXVldWUgPSAie2NlUXVldWVOYW1lfSIKIyttYXhXYWxsVGltZSA9IHtyZXF1ZXN0V2FsbHRpbWVNaW51dGV9CittYXhXYWxsVGltZSA9IDE0NDAKCmRlbGVnYXRlX2pvYl9HU0lfY3JlZGVudGlhbHNfbGlmZXRpbWUgPSAwCgojK3JlbW90ZV9SZXF1aXJlbWVudHMgPSBKb2JSdW5Db3VudCA9PSAwCnBlcmlvZGljX3JlbW92ZSA9IChKb2JTdGF0dXMgPT0gMiAmJiAoQ3VycmVudFRpbWUgLSBFbnRlcmVkQ3VycmVudFN0YXR1cykgPiA2MDQ4MDApCiMrcmVtb3RlX1BlcmlvZGljSG9sZCA9ICggSm9iU3RhdHVzPT0xICYmIGdyaWRqb2JzdGF0dXM9Pz1VTkRFRklORUQgJiYgQ3VycmVudFRpbWUtRW50ZXJlZEN1cnJlbnRTdGF0dXM+MzYwMCApIHx8ICggKEpvYlJ1bkNvdW50ID0hPSBVTkRFRklORUQgJiYgSm9iUnVuQ291bnQgPiAwKSApIHx8ICggSm9iU3RhdHVzID09IDIgJiYgQ3VycmVudFRpbWUtRW50ZXJlZEN1cnJlbnRTdGF0dXM+NjA0ODAwICkKK3JlbW90ZV9QZXJpb2RpY1JlbW92ZSA9IChKb2JTdGF0dXMgPT0gNSAmJiAoQ3VycmVudFRpbWUgLSBFbnRlcmVkQ3VycmVudFN0YXR1cykgPiAzNjAwKSB8fCAoSm9iU3RhdHVzID09IDEgJiYgZ2xvYnVzc3RhdHVzID0hPSAxICYmIChDdXJyZW50VGltZSAtIEVudGVyZWRDdXJyZW50U3RhdHVzKSA+IDg2NDAwKQoKK3NkZlBhdGggPSAie3NkZlBhdGh9IgoKIytyZW1vdGVfcXVldWUgPSAib3NnIgoKcXVldWUgMQo=
  lsst.submit_pilot_slac.sdf: |-
    ZXhlY3V0YWJsZSA9IC9vcHQvaGFydmVzdGVyL3NhbmRib3gvbHNzdC5ydW5waWxvdDItd3JhcHBlci5zaAojYXJndW1lbnRzID0gLXMge2NvbXB1dGluZ1NpdGV9IC1yIHtjb21wdXRpbmdTaXRlfSAtcSB7cGFuZGFRdWV1ZU5hbWV9IC1qIHtwcm9kU291cmNlTGFiZWx9IC1pIHtwaWxvdFR5cGV9IC10IC13IGdlbmVyaWMgLS1waWxvdC11c2VyIGdlbmVyaWMgLS11cmwgaHR0cHM6Ly9zcGhlbml4LXBhbmRhc2VydmVyLmFwcHMucmNmLmJubC5nb3YgLXAgNDQzIC1kIC0taGFydmVzdGVyLXN1Ym1pdC1tb2RlIFBVU0ggLS1hbGxvdy1zYW1lLXVzZXI9RmFsc2UgLS1pbnB1dC1kZXN0aW5hdGlvbi1kaXIgL3NwaGVuaXgvbHVzdHJlMDEvc3Bobnhwcm8vcnVjaW8gLS1qb2ItdHlwZT17am9iVHlwZX0ge3BpbG90UmVzb3VyY2VUeXBlT3B0aW9ufSB7cGlsb3RVcmxPcHRpb259IC0tcGlsb3R2ZXJzaW9uIHtwaWxvdFZlcnNpb259IHtwaWxvdFB5dGhvbk9wdGlvbn0KCiMgYXJndW1lbnRzID0gIi1zIHtjb21wdXRpbmdTaXRlfSAtciB7Y29tcHV0aW5nU2l0ZX0gLXEge3BhbmRhUXVldWVOYW1lfSAtaiB7cHJvZFNvdXJjZUxhYmVsfSAtaSB7cGlsb3RUeXBlfSAtdyBnZW5lcmljIC0tcGlsb3QtdXNlciBydWJpbiAtLXVybCBodHRwczovL3BhbmRhc2VydmVyLWRvbWEuY2Vybi5jaCAtZCAtLWhhcnZlc3Rlci1zdWJtaXQtbW9kZSBQVVNIIHtwaWxvdFJlc291cmNlVHlwZU9wdGlvbn0gLS1xdWV1ZWRhdGEtdXJsIGh0dHA6Ly9wYW5kYXNlcnZlci1kb21hLmNlcm4uY2g6MjUwODAvY2FjaGUvc2NoZWRjb25maWcve2NvbXB1dGluZ1NpdGV9LmFsbC5qc29uIC0tc3RvcmFnZWRhdGEtdXJsIGh0dHBzOi8vZGF0YWxha2UtY3JpYy5jZXJuLmNoL2FwaS9hdGxhcy9kZG1lbmRwb2ludC9xdWVyeS8/anNvbiAtLXBpbG90dmVyc2lvbiAzICAtLXB5dGhvbnZlcnNpb24gMyAtLWxvY2FscHkiCgphcmd1bWVudHMgPSAiLXMge2NvbXB1dGluZ1NpdGV9IC1yIHtjb21wdXRpbmdTaXRlfSAtcSB7cGFuZGFRdWV1ZU5hbWV9IC1qIHtwcm9kU291cmNlTGFiZWx9IC1pIHtwaWxvdFR5cGV9IC10IC13IGdlbmVyaWMgLS1waWxvdC11c2VyIHJ1YmluIC0tdXJsIGh0dHBzOi8vcGFuZGEtZGV2LXNlcnZlci5zbGFjLnN0YW5mb3JkLmVkdSAtZCAtLWhhcnZlc3Rlci1zdWJtaXQtbW9kZSBQVVNIIHtwaWxvdFJlc291cmNlVHlwZU9wdGlvbn0gLS1xdWV1ZWRhdGEtdXJsIGh0dHA6Ly9wYW5kYXNlcnZlci1kb21hLmNlcm4uY2g6MjUwODAvY2FjaGUvc2NoZWRjb25maWcve2NvbXB1dGluZ1NpdGV9LmFsbC5qc29uIC0tc3RvcmFnZWRhdGEtdXJsIGh0dHBzOi8vZGF0YWxha2UtY3JpYy5jZXJuLmNoL2FwaS9hdGxhcy9kZG1lbmRwb2ludC9xdWVyeS8/anNvbiAtLXBpbG90dmVyc2lvbiAzICAtLXB5dGhvbnZlcnNpb24gMyAtLWxvY2FscHkgLXAgNDQzIC0tam9iLXR5cGU9e2pvYlR5cGV9IC0tcGlsb3R1cmwgaHR0cDovL2Nlcm4uY2gvYXRsYXMtcGFuZGEtcGlsb3QvcGlsb3QzLVBSRS50YXIuZ3oiCgoKaW5pdGlhbGRpciA9IHthY2Nlc3NQb2ludH0KCmxvZyA9IHtsb2dEaXJ9L3tsb2dTdWJkaXJ9L2dyaWQuJChDbHVzdGVyKS4kKFByb2Nlc3MpLmxvZwpvdXRwdXQgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5vdXQKZXJyb3IgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5lcnIKdHJhbnNmZXJfZXhlY3V0YWJsZSA9IFRydWUKCmVudmlyb25tZW50ID0gIlBBTkRBX0pTSUQ9aGFydmVzdGVyLXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX0lEPXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX1dPUktFUl9JRD17d29ya2VySUR9IEdUQUc9e2d0YWd9IFNUT1JBR0VEQVRBX1NFUlZFUl9VUkw9aHR0cDovL2RhdGFsYWtlLWNyaWMuY2Vybi5jaC9hcGkvYXRsYXMvZGRtZW5kcG9pbnQvcXVlcnkvP2pzb24iCitoYXJ2ZXN0ZXJJRCA9ICJ7aGFydmVzdGVySUR9IgoraGFydmVzdGVyV29ya2VySUQgPSAie3dvcmtlcklEfSIKCnRyYW5zZmVyX2lucHV0X2ZpbGVzID0ge2FjY2Vzc1BvaW50fS9wYW5kYUpvYkRhdGEub3V0Cgp1bml2ZXJzZSA9IGdyaWQKZ3JpZF9yZXNvdXJjZSA9IGFyYyBodHRwczovL2FyY2NlMS5zbGFjLnN0YW5mb3JkLmVkdTo5NDQzL2FyZXgvcmVzdC8xLjAKIyBncmlkX3Jlc291cmNlID0ge2NlQVJDR3JpZFR5cGV9IHtjZUVuZHBvaW50fQoKbm9yZHVncmlkX3JzbCA9IChxdWV1ZSA9IHJ1YmluKShydW50aW1lZW52aXJvbm1lbnQgPSBBUFBTL0hFUC9BVExBUy1TSVRFLUxDRykocnVudGltZWVudmlyb25tZW50ID0gRU5WL1BST1hZKShqb2JuYW1lID0gYXJjX3BpbG90KShjb3VudCA9IHtuQ29yZVRvdGFsfSkoY291bnRwZXJub2RlID0ge25Db3JlVG90YWx9KShtZW1vcnkgPSB7cmVxdWVzdFJhbVBlckNvcmV9KSh3YWxsdGltZSA9IHtyZXF1ZXN0V2FsbHRpbWV9KShjcHV0aW1lID0ge3JlcXVlc3RDcHV0aW1lfSkoZW52aXJvbm1lbnQgPSAoUEFOREFfSlNJRCBoYXJ2ZXN0ZXIte2hhcnZlc3RlcklEfSkoSEFSVkVTVEVSX0lEIHtoYXJ2ZXN0ZXJJRH0pKEhBUlZFU1RFUl9XT1JLRVJfSUQge3dvcmtlcklEfSkoR1RBRyB7Z3RhZ30pKEFQRk1PTiBodHRwOi8vYXBmbW9uLmxhbmNzLmFjLnVrL2FwaSkoQVBGRklEIHtoYXJ2ZXN0ZXJJRH0pKEFQRkNJRCAkKENsdXN0ZXIpLiQoUHJvY2VzcykpKQoKYXJjX3Jlc291cmNlcyA9IDxTbG90UmVxdWlyZW1lbnQ+ICBcCiAgICAgICAgICAgICAgICA8TnVtYmVyT2ZTbG90cz4xPC9OdW1iZXJPZlNsb3RzPiBcCiAgICAgICAgICAgICAgICAgICAgPFNsb3RzUGVySG9zdD4xPC9TbG90c1Blckhvc3Q+IFwKICAgICAgICAgICAgICAgIDwvU2xvdFJlcXVpcmVtZW50PiBcCiAgICAgICAgICAgICAgICA8UXVldWVOYW1lPnJ1YmluPC9RdWV1ZU5hbWU+IFwKICAgICAgICAgICAgICAgIDxJbmRpdmlkdWFsUGh5c2ljYWxNZW1vcnk+e3JlcXVlc3RSYW1CeXRlc308L0luZGl2aWR1YWxQaHlzaWNhbE1lbW9yeT4KClg1MDlVc2VyUHJveHkgPSB7eDUwOVVzZXJQcm94eX0KU2hvdWxkVHJhbnNmZXJGaWxlcyA9IFlFUwpXaGVuVG9UcmFuc2Zlck91dHB1dCA9IE9OX0VYSVQKdXNlX3g1MDl1c2VycHJveHkgPSB0cnVlCgorcmVtb3RlX2pvYnVuaXZlcnNlID0gNQorcmVtb3RlX1Nob3VsZFRyYW5zZmVyRmlsZXMgPSAiWUVTIgorcmVtb3RlX1doZW5Ub1RyYW5zZmVyT3V0cHV0ID0gIk9OX0VYSVRfT1JfRVZJQ1QiCityZW1vdGVfVHJhbnNmZXJPdXRwdXQgPSAiIgojK3JlbW90ZV9SZXF1ZXN0Q3B1cyA9IHtuQ29yZVRvdGFsfQojK3JlbW90ZV9SZXF1ZXN0TWVtb3J5ID0ge3JlcXVlc3RSYW19CiMrcmVtb3RlX1JlcXVlc3REaXNrID0ge3JlcXVlc3REaXNrfQojK3JlbW90ZV9Kb2JNYXhWYWNhdGVUaW1lID0ge3JlcXVlc3RXYWxsdGltZX0KK2lvSW50ZW5zaXR5ID0ge2lvSW50ZW5zaXR5fQoreGNvdW50ID0ge25Db3JlVG90YWx9CittYXhNZW1vcnkgPSB7cmVxdWVzdFJhbX0KK3JlbW90ZV9xdWV1ZSA9ICJydWJpbiIKIyttYXhXYWxsVGltZSA9IHtyZXF1ZXN0V2FsbHRpbWVNaW51dGV9CittYXhXYWxsVGltZSA9IDE0NDAKCmRlbGVnYXRlX2pvYl9HU0lfY3JlZGVudGlhbHNfbGlmZXRpbWUgPSAwCgojK3JlbW90ZV9SZXF1aXJlbWVudHMgPSBKb2JSdW5Db3VudCA9PSAwCnBlcmlvZGljX3JlbW92ZSA9IChKb2JTdGF0dXMgPT0gMiAmJiAoQ3VycmVudFRpbWUgLSBFbnRlcmVkQ3VycmVudFN0YXR1cykgPiA2MDQ4MDApCiMrcmVtb3RlX1BlcmlvZGljSG9sZCA9ICggSm9iU3RhdHVzPT0xICYmIGdyaWRqb2JzdGF0dXM9Pz1VTkRFRklORUQgJiYgQ3VycmVudFRpbWUtRW50ZXJlZEN1cnJlbnRTdGF0dXM+MzYwMCApIHx8ICggKEpvYlJ1bkNvdW50ID0hPSBVTkRFRklORUQgJiYgSm9iUnVuQ291bnQgPiAwKSApIHx8ICggSm9iU3RhdHVzID09IDIgJiYgQ3VycmVudFRpbWUtRW50ZXJlZEN1cnJlbnRTdGF0dXM+NjA0ODAwICkKK3JlbW90ZV9QZXJpb2RpY1JlbW92ZSA9IChKb2JTdGF0dXMgPT0gNSAmJiAoQ3VycmVudFRpbWUgLSBFbnRlcmVkQ3VycmVudFN0YXR1cykgPiAzNjAwKSB8fCAoSm9iU3RhdHVzID09IDEgJiYgZ2xvYnVzc3RhdHVzID0hPSAxICYmIChDdXJyZW50VGltZSAtIEVudGVyZWRDdXJyZW50U3RhdHVzKSA+IDg2NDAwKQoKK3NkZlBhdGggPSAie3NkZlBhdGh9IgoKIytyZW1vdGVfcXVldWUgPSAib3NnIgoKcXVldWUgMQo=
  lsst.vomsproxy-renew: |-
    IyEvYmluL2Jhc2gKCnByb3h5X3BhdGg9L29wdC9oYXJ2ZXN0ZXIvZXRjL2NlcnQKbmV3X3Byb3h5X3BhdGg9L2RhdGEvaGFydmVzdGVyL3J1bgpwcm94eV91c2VyPWlkZHNzdjEKCnByb3h5X2NlcnQ9JHtwcm94eV9wYXRofS9waWxvdF91c2VyY2VydC5wZW0KcHJveHlfa2V5PSR7cHJveHlfcGF0aH0vcGlsb3RfdXNlcmtleS5wZW0KCnByb3h5PSR7bmV3X3Byb3h5X3BhdGh9L3g1MDl1cF91MjU2MDYKCmNwICAkcHJveHlfY2VydCAkbmV3X3Byb3h5X3BhdGgKY3AgJHByb3h5X2tleSAkbmV3X3Byb3h5X3BhdGgKbmV3X3Byb3h5X2NlcnQ9JHtuZXdfcHJveHlfcGF0aH0vcGlsb3RfdXNlcmNlcnQucGVtCm5ld19wcm94eV9rZXk9JHtuZXdfcHJveHlfcGF0aH0vcGlsb3RfdXNlcmtleS5wZW0KY2htb2QgNDAwICRuZXdfcHJveHlfY2VydApjaG1vZCA0MDAgJG5ld19wcm94eV9rZXkKCnZvbXMtcHJveHktaW5pdDIgLXZhbGlkIDk2OjAwIC1xIC1jZXJ0ICRuZXdfcHJveHlfY2VydCAta2V5ICRuZXdfcHJveHlfa2V5IC1vdXQgJHByb3h5ID4+L3RtcC9wcm94eV9yZW5ldy5kZWJ1ZwoKI2NoZWNrIGxpZmV0aW1lIG9mIGNlcnRpZmljYXRlCnZvbXMtcHJveHktaW5mbzIgLWV4aXN0cyAtaG91cnMgMTEgLWZpbGUgJHByb3h5CgppZiBbICQ/IC1uZSAwIF07IHRoZW4KICBlY2hvICRwcm94eSBleHBpcmVzIGluIDExIGhvdXJzIG9uIGBob3N0bmFtZWAsIFBsZWFzZSBjaGVja3wgbWFpbCAtcyAiW1ZPTVNfUFJPWFldV0FSTklORyA6IEdyaWQgcHJveHkgZm9yIFJ1YmluIGs4cyBleHBpcmVzIHNvb24gb24gYGhvc3RuYW1lYCIgYXRsYXMtYWRjLWlkZHMtazhzQGNlcm4uY2gKZmkK
  run-harvester-crons: |-
    IyEvYmluL2Jhc2gKCiMgcmVmcmVzaCBDQSBmaWxlcwp3aGlsZSB0cnVlOyBkbyBzbGVlcCAzNjAwMDsgL29wdC9oYXJ2ZXN0ZXIvYmluL3BhbmRhX2NvbW1vbi1pbnN0YWxsX2lndGZfY2EgPiAvdmFyL2xvZy9wYW5kYS9pbnN0YWxsX2lndGZfY2EubG9nIDI+JjE7IGRvbmUgJgoKaWYgW1sgISAteiAiJHtFWFBFUklNRU5UfSIgXV07IHRoZW4KICAgIEN1cnJlbnREaXI9IiQoIGNkICIkKCBkaXJuYW1lICIke0JBU0hfU09VUkNFWzBdfSIgKSIgJiYgcHdkICkiCiAgICBydW5fc2NyaXB0PSR7Q3VycmVudERpcn0vJHtFWFBFUklNRU5UfS5ydW4taGFydmVzdGVyLWNyb25zCiAgICBpZiBbIC1mICR7cnVuX3NjcmlwdH0gXTsgdGhlbgogICAgICAgIGVjaG8gIkV4ZWN1dGluZyAke3J1bl9zY3JpcHR9IgogICAgICAgIGJhc2ggJHJ1bl9zY3JpcHQgJgogICAgZmkKZmkK
  sphenix.init-harvester: |-
    IyEvYmluL2Jhc2gKCiMgY29weSBjZXJ0cyBhbmQgc2V0IHBlcm1pc3Npb24KY3AgL29wdC9oYXJ2ZXN0ZXIvc2FuZGJveC8qLnBlbSAvZGF0YS9oYXJ2ZXN0ZXIvCmNobW9kIDYwMCAvZGF0YS9oYXJ2ZXN0ZXIvKi5wZW0K
  sphenix.run-harvester-crons: |-
    IyEvYmluL2Jhc2gKCiMgZ2VyZXJhdGUgZmFrZSBWT01TIHByb3h5CndoaWxlIHRydWU7IGRvIHZvbXMtcHJveHktZmFrZSAtcmZjIC12b21zIHNwaGVuaXggLW91dCAvZGF0YS9oYXJ2ZXN0ZXIvc3BoZW5peC5wcm94eSAtaG91cnMgOTYgLWNlcnQ9L2RhdGEvaGFydmVzdGVyL3VzZXJjZXJ0LnBlbSAta2V5PS9kYXRhL2hhcnZlc3Rlci91c2Vya2V5LnBlbSAtaG9zdGNlcnQgL29wdC9oYXJ2ZXN0ZXIvc2FuZGJveC9oY3ZvbXMuc2RjYy5ibmwuZ292LmNydCAtaG9zdGtleSAvb3B0L2hhcnZlc3Rlci9zYW5kYm94L2hjdm9tcy5zZGNjLmJubC5nb3Yta2V5LnBlbSAtZnFhbiAiL3NwaGVuaXgvUm9sZT1waWxvdC9DYXBhYmlsaXR5PU5VTEwiIC11cmkgaGN2b21zLnNkY2MuYm5sLmdvdjoxNTAwMSA+IC92YXIvbG9nL3BhbmRhL3Byb3h5LmxvZyAyPiYxOyBzbGVlcCAzNjAwOyBkb25lICYK
  sphenix.runpilot2-wrapper.sh: |-
    
  sphenix.submit_pilot.sdf: |-
    ZXhlY3V0YWJsZSA9IC9vcHQvaGFydmVzdGVyL3NhbmRib3gvc3BoZW5peC5ydW5waWxvdDItd3JhcHBlci5zaAojYXJndW1lbnRzID0gLXMge2NvbXB1dGluZ1NpdGV9IC1yIHtjb21wdXRpbmdTaXRlfSAtcSB7cGFuZGFRdWV1ZU5hbWV9IC1qIHtwcm9kU291cmNlTGFiZWx9IC1pIHtwaWxvdFR5cGV9IC10IC13IGdlbmVyaWMgLS1waWxvdC11c2VyIGdlbmVyaWMgLS11cmwgaHR0cHM6Ly9zcGhlbml4LXBhbmRhc2VydmVyLmFwcHMucmNmLmJubC5nb3YgLXAgNDQzIC1kIC0taGFydmVzdGVyLXN1Ym1pdC1tb2RlIFBVU0ggLS1hbGxvdy1zYW1lLXVzZXI9RmFsc2UgLS1pbnB1dC1kZXN0aW5hdGlvbi1kaXIgL3NwaGVuaXgvbHVzdHJlMDEvc3Bobnhwcm8vcnVjaW8gLS1qb2ItdHlwZT17am9iVHlwZX0ge3BpbG90UmVzb3VyY2VUeXBlT3B0aW9ufSB7cGlsb3RVcmxPcHRpb259IC0tcGlsb3R2ZXJzaW9uIHtwaWxvdFZlcnNpb259IHtwaWxvdFB5dGhvbk9wdGlvbn0KCmFyZ3VtZW50cyA9IC1zIHtjb21wdXRpbmdTaXRlfSAtciB7Y29tcHV0aW5nU2l0ZX0gLXEge3BhbmRhUXVldWVOYW1lfSAtaiB7cHJvZFNvdXJjZUxhYmVsfSAtaSB7cGlsb3RUeXBlfSAtdCAtdyBnZW5lcmljIC0tcGlsb3QtdXNlciBnZW5lcmljIC0tdXJsIGh0dHBzOi8vc3BoZW5peC1wYW5kYXNlcnZlci5hcHBzLnJjZi5ibmwuZ292IC1wIDQ0MyAtZCAtLWhhcnZlc3Rlci1zdWJtaXQtbW9kZSBQVVNIIC0tYWxsb3ctc2FtZS11c2VyPUZhbHNlIC0taW5wdXQtZGVzdGluYXRpb24tZGlyIC9zcGhlbml4L2x1c3RyZTAxL3NwaG54cHJvL3J1Y2lvIC0tam9iLXR5cGU9e2pvYlR5cGV9IHtwaWxvdFJlc291cmNlVHlwZU9wdGlvbn0gLS1waWxvdHVybCBodHRwOi8vY2Vybi5jaC9hdGxhcy1wYW5kYS1waWxvdC9waWxvdDMtUFJFLnRhci5neiAgLS1waWxvdHZlcnNpb24gMyAtLXB5dGhvbnZlcnNpb24gMwoKaW5pdGlhbGRpciA9IHthY2Nlc3NQb2ludH0KCmxvZyA9IHtsb2dEaXJ9L3tsb2dTdWJkaXJ9L2dyaWQuJChDbHVzdGVyKS4kKFByb2Nlc3MpLmxvZwpvdXRwdXQgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5vdXQKZXJyb3IgPSB7bG9nRGlyfS97bG9nU3ViZGlyfS9ncmlkLiQoQ2x1c3RlcikuJChQcm9jZXNzKS5lcnIKdHJhbnNmZXJfZXhlY3V0YWJsZSA9IFRydWUKCmVudmlyb25tZW50ID0gIlBBTkRBX0pTSUQ9aGFydmVzdGVyLXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX0lEPXtoYXJ2ZXN0ZXJJRH0gSEFSVkVTVEVSX1dPUktFUl9JRD17d29ya2VySUR9IEdUQUc9e2d0YWd9IFNUT1JBR0VEQVRBX1NFUlZFUl9VUkw9aHR0cDovL2RhdGFsYWtlLWNyaWMuY2Vybi5jaC9hcGkvYXRsYXMvZGRtZW5kcG9pbnQvcXVlcnkvP2pzb24iCitoYXJ2ZXN0ZXJJRCA9ICJ7aGFydmVzdGVySUR9IgoraGFydmVzdGVyV29ya2VySUQgPSAie3dvcmtlcklEfSIKCnRyYW5zZmVyX2lucHV0X2ZpbGVzID0ge2FjY2Vzc1BvaW50fS9wYW5kYUpvYkRhdGEub3V0Cgp1bml2ZXJzZSA9IGdyaWQKZ3JpZF9yZXNvdXJjZSA9IGNvbmRvciBzcGNlMDEuc2RjYy5ibmwuZ292IHNwY2UwMS5zZGNjLmJubC5nb3Y6OTYxOQoKWDUwOVVzZXJQcm94eSA9IHt4NTA5VXNlclByb3h5fQpTaG91bGRUcmFuc2ZlckZpbGVzID0gWUVTCldoZW5Ub1RyYW5zZmVyT3V0cHV0ID0gT05fRVhJVAp1c2VfeDUwOXVzZXJwcm94eSA9IHRydWUKCityZW1vdGVfam9idW5pdmVyc2UgPSA1CityZW1vdGVfU2hvdWxkVHJhbnNmZXJGaWxlcyA9ICJZRVMiCityZW1vdGVfV2hlblRvVHJhbnNmZXJPdXRwdXQgPSAiT05fRVhJVF9PUl9FVklDVCIKK3JlbW90ZV9UcmFuc2Zlck91dHB1dCA9ICIiCiMrcmVtb3RlX1JlcXVlc3RDcHVzID0ge25Db3JlVG90YWx9CiMrcmVtb3RlX1JlcXVlc3RNZW1vcnkgPSB7cmVxdWVzdFJhbX0KIytyZW1vdGVfUmVxdWVzdERpc2sgPSB7cmVxdWVzdERpc2t9CiMrcmVtb3RlX0pvYk1heFZhY2F0ZVRpbWUgPSB7cmVxdWVzdFdhbGx0aW1lfQoraW9JbnRlbnNpdHkgPSB7aW9JbnRlbnNpdHl9Cit4Y291bnQgPSB7bkNvcmVUb3RhbH0KK21heE1lbW9yeSA9IHtyZXF1ZXN0UmFtfQorcmVtb3RlX3F1ZXVlID0gIntjZVF1ZXVlTmFtZX0iCiMrbWF4V2FsbFRpbWUgPSB7cmVxdWVzdFdhbGx0aW1lTWludXRlfQorbWF4V2FsbFRpbWUgPSAxNDQwCgpkZWxlZ2F0ZV9qb2JfR1NJX2NyZWRlbnRpYWxzX2xpZmV0aW1lID0gMAoKIytyZW1vdGVfUmVxdWlyZW1lbnRzID0gSm9iUnVuQ291bnQgPT0gMApwZXJpb2RpY19yZW1vdmUgPSAoSm9iU3RhdHVzID09IDIgJiYgKEN1cnJlbnRUaW1lIC0gRW50ZXJlZEN1cnJlbnRTdGF0dXMpID4gNjA0ODAwKQojK3JlbW90ZV9QZXJpb2RpY0hvbGQgPSAoIEpvYlN0YXR1cz09MSAmJiBncmlkam9ic3RhdHVzPT89VU5ERUZJTkVEICYmIEN1cnJlbnRUaW1lLUVudGVyZWRDdXJyZW50U3RhdHVzPjM2MDAgKSB8fCAoIChKb2JSdW5Db3VudCA9IT0gVU5ERUZJTkVEICYmIEpvYlJ1bkNvdW50ID4gMCkgKSB8fCAoIEpvYlN0YXR1cyA9PSAyICYmIEN1cnJlbnRUaW1lLUVudGVyZWRDdXJyZW50U3RhdHVzPjYwNDgwMCApCityZW1vdGVfUGVyaW9kaWNSZW1vdmUgPSAoSm9iU3RhdHVzID09IDUgJiYgKEN1cnJlbnRUaW1lIC0gRW50ZXJlZEN1cnJlbnRTdGF0dXMpID4gMzYwMCkgfHwgKEpvYlN0YXR1cyA9PSAxICYmIGdsb2J1c3N0YXR1cyA9IT0gMSAmJiAoQ3VycmVudFRpbWUgLSBFbnRlcmVkQ3VycmVudFN0YXR1cykgPiA4NjQwMCkKCitzZGZQYXRoID0gIntzZGZQYXRofSIKCitQcm9qZWN0TmFtZT0ic1BIRU5JWCIKIytyZW1vdGVfcXVldWUgPSAib3NnIgoKcXVldWUgMQo=
---
# Source: harvester/charts/harvester/templates/configmap.yaml
# host cert and key
apiVersion: v1
kind: ConfigMap
metadata:
    name: harvester-dev-certs
binaryData:
---
# Source: harvester/charts/mariadb/templates/configmap.yaml
# config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: harvester-dev-mariadb-configmap
  labels:
    helm.sh/chart: mariadb-0.1.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  MARIADB_DATABASE: "harvester"
  MARIADB_USER: "harvester"
  MARIADB_PASSWORD: NKdSRhjE
  MARIADB_ROOT_PASSWORD: MbUceKpF
  HARVESTER_DB_HOST: harvester-dev-mariadb
---
# Source: harvester/charts/harvester/templates/deployment.yaml
# pv
# pv claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harvester-dev
  labels:
    helm.sh/chart: harvester-0.1.0
    app.kubernetes.io/name: harvester
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  storageClassName: wekafs--sdf-k8s01
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Source: harvester/charts/mariadb/templates/deployment.yaml
# pv claim
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: harvester-dev-mariadb
  labels:
    helm.sh/chart: mariadb-0.1.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  storageClassName: wekafs--sdf-k8s01
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
# Source: harvester/charts/mariadb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harvester-dev-mariadb
  labels:
    helm.sh/chart: mariadb-0.1.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mariadb-port
      protocol: TCP
      name: mariadb-port
  selector:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: harvester-dev
---
# Source: harvester/charts/harvester/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harvester-dev
  labels:
    helm.sh/chart: harvester-0.1.0
    app.kubernetes.io/name: harvester
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harvester
      app.kubernetes.io/instance: harvester-dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harvester
        app.kubernetes.io/instance: harvester-dev
    spec:
      hostname:  harvester-dev
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: harvester
          securityContext:
            {}
          image: "ghcr.io/hsf/harvester:v0.2.12"
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args:
            - while ! mysqladmin ping -h ${HARVESTER_DB_HOST} -p${MARIADB_PASSWORD} --silent; do sleep 1; done;
              cp /opt/harvester/sandbox/init-harvester /data/harvester/;
              chmod +x /data/harvester/init-harvester;
              cp /opt/harvester/sandbox/run-harvester-crons /data/harvester/;
              chmod +x /data/harvester/run-harvester-crons;
              cp /opt/harvester/sandbox/* /data/harvester/;
              runuser -u atlpan -g zp -- /opt/harvester/etc/rc.d/init.d/run-harvester-services;
              sleep infinity & wait
          resources:
            {}
          volumeMounts:
            - name: harvester-dev-logs
              mountPath: /var/log/panda/
            - name: harvester-dev-configjson
              mountPath: /opt/harvester/etc/configmap
            - name: harvester-dev-queueconfig
              mountPath: /opt/harvester/etc/queue_config
            - name: harvester-dev-sandbox
              mountPath: /opt/harvester/sandbox
            - name: harvester-dev-certs
              mountPath: /opt/harvester/etc/cert
          envFrom:
            - secretRef:
                name: harvester-dev-secret-envs
            - configMapRef:
                name: harvester-dev-env
      volumes:
        - name: harvester-dev-logs
          persistentVolumeClaim:
            claimName: harvester-dev
        - name: harvester-dev-configjson
          configMap:
            name: harvester-dev-configjson
        - name: harvester-dev-queueconfig
          configMap:
            name: harvester-dev-queueconfig
        - name: harvester-dev-sandbox
          configMap:
            name: harvester-dev-sandbox
        - name: harvester-dev-certs
          secret:
              secretName: harvester-dev-secret-certs
---
# Source: harvester/charts/mariadb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harvester-dev-mariadb
  labels:
    helm.sh/chart: mariadb-0.1.0
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: harvester-dev
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: harvester-dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mariadb
        app.kubernetes.io/instance: harvester-dev
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: mariadb
          securityContext:
            {}
          image: "bitnami/mariadb:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: mariadb-port
              containerPort: 3306
              protocol: TCP
          envFrom:
            - secretRef:
                name: harvester-dev-secret-envs
          resources:
            {}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: harvester-dev-mariadb-data
      volumes:
        - name: harvester-dev-mariadb-data
          persistentVolumeClaim:
            claimName: harvester-dev-mariadb
